<?php
/* 
 * !! PLEASE DO NOT EDIT THIS FILE !! 
 * Please read "How To Use System" (file "info.php") @ MENU -> Information -> How To Use System
 * Advanced Users can include "userInc.php" to add Custom Code that will not be affected by updates.
*/

	/*
	 * @Project:
	 * ServInfo Server Information Manager
	 * Author: Elite Star Services
	 * Web: https://servinfo.elite-star-services.com/
	 * 
	 * @Changelog:
	 * https://servinfo.elite-star-services.com/sc-changelog/
	 * 
	 * @License:
	 * GPL v3 | https://elite-star-services.com/license/
	*/


// SET CURRENT VERSION
$clientVersion = '1.1.0';


// CHECK IF PLUGIN OR BROWSER CALL (check before loading wp-config)
if (defined( 'WPINC' )) { $isPlug = "Yes"; }


// GET PROPER CONFIG FILE
if (file_exists('sc_cnf.php')) {
    require('sc_cnf.php');
} else { 
    //require_once(ABSPATH . 'wp-config.php');
    require_once( $_SERVER['DOCUMENT_ROOT'] . '/wp-config.php' );
    if (!isset($token)) { $token = SI_TOKEN; }
    $dbUser = DB_USER;
    $dbPass = DB_PASSWORD;
    $isWP = "Yes";
}

// PASSWORD PROTECTION - CLIENT NEEDS TOKEN
global $wp_version;
if (!isset($wp_version)) { $wp_version = '0'; }
if (function_exists( 'classicpress_version' )) { 
    $myp_ver = classicpress_version(); 
} else {
    $myp_ver = $wp_version;
}
if (isset($isPlug)) { $_GET[$token] = $token; }
if (!isset($_GET[$token])) { echo "ACCESS DENIED: Check Server and ServInfo Requirements..."; }
else {




// FUNCTION TO GET SERVER URL
function url_origin( $s, $use_forwarded_host = false )
{
    $isssl    = ( ! empty( $s['HTTPS'] ) && $s['HTTPS'] == 'on' );
    $sp       = strtolower( $s['SERVER_PROTOCOL'] );
    $protocol = substr( $sp, 0, strpos( $sp, '/' ) ) . ( ( $isssl ) ? 's' : '' );
    $port     = $s['SERVER_PORT'];
    $port     = ( ( ! $isssl && $port=='80' ) || ( $isssl && $port=='443' ) ) ? '' : ':'.$port;
    $rhost    = ( $use_forwarded_host && isset( $s['HTTP_X_FORWARDED_HOST'] ) ) ? $s['HTTP_X_FORWARDED_HOST'] : ( isset( $s['HTTP_HOST'] ) ? $s['HTTP_HOST'] : null );
    $rhost    = isset( $rhost ) ? $rhost : $s['SERVER_NAME'] . $port;
    return $protocol . '://' . $rhost;
}
function full_url( $s, $use_forwarded_host = false )
// RETURN FULL URL
//{ return url_origin( $s, $use_forwarded_host ) . $s['REQUEST_URI']; }
// RETURN BASE URL
{ return url_origin( $s, $use_forwarded_host ); }


// FUNCTION TO PARSE PHPINFO()
function phpinfo_array($return=false){
    ob_start();
    phpinfo(-1);
    
    $pi = preg_replace(
    array('#^.*<body>(.*)</body>.*$#ms', '#<h2>PHP License</h2>.*$#ms',
    '#<h1>Configuration</h1>#',  "#\r?\n#", "#</(h1|h2|h3|tr)>#", '# +<#',
    "#[ \t]+#", '#&nbsp;#', '#  +#', '# class=".*?"#', '%&#039;%',
      '#<tr>(?:.*?)" src="(?:.*?)=(.*?)" alt="PHP Logo" /></a>'
      .'<h1>PHP Version (.*?)</h1>(?:\n+?)</td></tr>#',
      '#<h1><a href="(?:.*?)\?=(.*?)">PHP Credits</a></h1>#',
      '#<tr>(?:.*?)" src="(?:.*?)=(.*?)"(?:.*?)Zend Engine (.*?),(?:.*?)</tr>#',
      "# +#", '#<tr>#', '#</tr>#'),
    array('$1', '', '', '', '</$1>' . "\n", '<', ' ', ' ', ' ', '', ' ',
      '<h2>PHP Configuration</h2>'."\n".'<tr><td>PHP Version</td><td>$2</td></tr>'.
      "\n".'<tr><td>PHP Egg</td><td>$1</td></tr>',
      '<tr><td>PHP Credits Egg</td><td>$1</td></tr>',
      '<tr><td>Zend Engine</td><td>$2</td></tr>' . "\n" .
      '<tr><td>Zend Egg</td><td>$1</td></tr>', ' ', '%S%', '%E%'),
    ob_get_clean());
    
    $sections = explode('<h2>', strip_tags($pi, '<h2><th><td>'));
    unset($sections[0]);
    
    $pi = array();
    foreach($sections as $section){
       $n = substr($section, 0, strpos($section, '</h2>'));
       preg_match_all(
       '#%S%(?:<td>(.*?)</td>)?(?:<td>(.*?)</td>)?(?:<td>(.*?)</td>)?%E%#',
         $section, $askapache, PREG_SET_ORDER);
       foreach($askapache as $m)
       If (isset($m[2])) {
           $pi[$n][$m[1]]=(!isset($m[3])||$m[2]==$m[3])?$m[2]:array_slice($m,2);
       }
    }
    
    return ($return === false) ? print_r($pi) : $pi;
}



// BEGIN DATA COLLECTION



// CHECK IF BEHIND PROXY SERVER
@$proxy = $_SERVER['HTTP_X_FORWARDED_FOR'];


// GET PHP VERSION
$php = phpversion();

// GET MACHINE INFO
$mach = 'hostnamectl status';
exec($mach, $macout);
//print_r($macout);
foreach ($macout as $key => $value) { 
    $minf = explode(": ", $value);
    $minf[0] = trim($minf[0]);
// Get Individual Items Here 
    if ($minf[0] == "Machine ID") { $sid = $minf[1]; }
    if ($minf[0] == "Static hostname") { $host = $minf[1]; }
    if ($minf[0] == "Virtualization") { $vm = strtoupper($minf[1]); }
    if ($minf[0] == "Kernel") { $ker = $minf[1]; }
// Build Array for Show Section
    $macInf[$minf[0]] = $minf[1];
}

// Backup Method to Get SID
if (!$sid) { $sid = trim(shell_exec('cat /etc/machine-id 2>/dev/null')); }

// Backup Method to Get Host Name
if ($host == "") { $host = gethostname(); }



// GET SERVER URL 
$surl = full_url( $_SERVER );

// CONVERT URL TO DOMAIN
$url2dom = explode("://", $surl);
$domain = $url2dom[1];



// USE API TO CHECK FOR CERTIFICATE IF BEHIND REVERSE PROXY
$certOwn = "";
if ($proxy != "") {
$method = "GET";

$full_url = "https://cs.elite-star-services.com/common/api/checkCert.php?domain=".$domain;

// CREATE THE JSON ARRAY
$my_data = array(
  'http'=>array(
    'method'=>"$method",
    'header'=>
    "Content-type: application/json\r\n"
  )
);

$request = stream_context_create($my_data);


// SEND THE REQUEST TO SERVER
$data = file_get_contents($full_url, false, $request);

if ( !$data ) {
// DOWNLOAD FAILED -> SSL EXCEPTION
$arrContextOptions=array(
    "ssl"=>array(
        "verify_peer"=>false,
        "verify_peer_name"=>false,
    ),
);  
$data = file_get_contents($full_url, false, stream_context_create($arrContextOptions));
} 

$certinfo = json_decode($data, true);

//print_r($data);
//print_r($certinfo);


} else {


// MAKE LOCAL CHECK FOR SSL CERTIFICATE
$get = stream_context_create(array("ssl" => array("capture_peer_cert" => TRUE)));
@$read = stream_socket_client("ssl://".$domain.":443", $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $get);
if ($read) {
$cert = stream_context_get_params($read);
$certinfo = openssl_x509_parse($cert['options']['ssl']['peer_certificate']);
}

//print_r($certinfo);
}


// PROCESS CERTIFICATE DATA
if (isset($certinfo)) {
$valid_to = date(DATE_RFC2822, $certinfo['validTo_time_t']);
$thisDte = date_create($valid_to);
$certDat = date_format($thisDte, 'n/j/Y');
$certdata = $certinfo;
foreach ($certinfo as $key => $item) {
    if ($key == "issuer") {
        foreach ($item as $type => $value) {
            if ($type == "O") { $certOwn = $value; }
        }
    }
}
}


// SET LOCAL PROTOCOL & URLS HERE IN CASE BEHIND REVERSE PROXY
if ($certOwn == "") { 
    $ssl = "No Certificate Found"; 
    $baseURL = "http://".$domain;
    $setHT = "http";
} else { 
    $ssl = $certOwn." Certificate | Expires: ".$certDat; 
    $baseURL = "https://".$domain;
    $setHT = "https";
}


if (isset($isPlug)) {
// MULTISITE SETTING
    if( is_multisite() ) {
        require ('../../'.WPINC.'/version.php');
    } else {
        require ('../'.WPINC.'/version.php');
    }
    $url = plugin_dir_url( __FILE__ );
} else {
    $actual_link = $setHT . "://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";
    $exName = strrchr($actual_link, '/');
    $url = str_replace($exName, '/', $actual_link);
}


// GET SERVER IP
$ip = $_SERVER['SERVER_ADDR'];


// CHECK FOR PHPMYADMIN VERSION
$pma_chk = shell_exec("dpkg -l phpmyadmin");
$pma_tmp = explode(":", $pma_chk);
if (isset($pma_tmp[2])) {
	$pma_v = explode(" ", $pma_tmp[2]);
	$pma = $pma_v[0];
}
//print_r($pma);
//echo $pma;
//echo "<br>";

// GET PMA URL TOKEN FROM SID FOR NOW
$pmatok = substr($sid, 8, -8);
//echo $pmatok;
//echo "<br>";


// CHECK PHPMYADMIN URL CONFIG - BACKUP CHECK IF PMA EXISTS
$pmaurl = $baseURL.'/phpmyadmin/';
$pma_headers = @get_headers($pmaurl);
//print_r($pma_headers);
if(!$pma_headers || $pma_headers[0] == 'HTTP/1.1 404 Not Found' || $pma_headers[0] == 'HTTP/1.1 301 Moved Permanently') {
//    $pma_exists = false;
//    echo "NOT FOUND";
//    echo "<a href='".$baseURL."/phpmyadmin/'>NOT FOUND</a>";

    $pmasurl = $baseURL.'/phpmyadmin-'.$pmatok.'/';
    $pmas_headers = @get_headers($pmasurl);
    if(!$pmas_headers || $pmas_headers[0] == 'HTTP/1.1 404 Not Found') {
//        $pma_exists = false;
//        echo "<a href='".$baseURL."/phpmyadmin-".$pmatok."/'>PMA NOT FOUND</a>";
        echo '';
    }
    else {
        $pma_exists = true;
        $pmalink = "<a href='".$baseURL."/phpmyadmin-".$pmatok."/'><b>".$baseURL."/phpmyadmin-".$pmatok."/</b></a>";
    }

}
else {
    $pma_exists = true;
//    $pmainfo = "https://www.linode.com/docs/guides/how-to-secure-phpmyadmin/#changing-phpmyadmin-alias";
    $pmainfo = "https://elite-star-services.com/blog/secure-phpmyadmin/";
    $pmalink = "<a href='".$baseURL."/phpmyadmin/'><b>".$baseURL."/phpmyadmin/</b></a> | <a href='".$pmainfo."' style='color:firebrick;'>PMA URL INSECURE - CLICK FOR INFO TO SECURE</a>";
}



// GET SYSTEM UPTIME
$preup   = @file_get_contents('/proc/uptime');
$numut   = floatval($preup);
/* This Only Works PHP7+
$secs  = fmod($numut, 60); $numut = intdiv($numut, 60);
$min  = $numut % 60;      $numut = intdiv($numut, 60);
$hrs = $numut % 24;      $numut = intdiv($numut, 24);
*/
$secs  = fmod($numut, 60); $numut = (int)($numut / 60);
$min  = $numut % 60;      $numut = (int)($numut / 60);
$hrs = $numut % 24;      $numut = (int)($numut / 24);
$day  = $numut;
$run = $day.':'.$hrs.':'.$min;
$upTime = $day.' Days, '.$hrs.' Hours, '.$min.' Minutes';



// GET OS INFO
$osin = 'cat /etc/*release';
exec($osin, $output);
foreach ($output as $key => $value) { 
    $ost = explode("=", $value);
    if ($ost[0] == "ID") { $osID = $ost[1]; }
    if ($ost[0] == "PRETTY_NAME") { $osPN = str_replace('"', '', $ost[1]); }
    if ($ost[0] == "NAME") { $osN = str_replace('"', '', $ost[1]); }
    if ($ost[0] == "VERSION_CODENAME") { $osVC = $ost[1]; }
    if ($ost[0] == "VERSION") { $osV = str_replace('"', '', $ost[1]); }
}

// GET MORE OS VERSION INFO
$ver = 'cat /etc/*version';
exec($ver, $outver);
$svi = $outver[0];
//print_r($outver);

// DETERMINE HOW TO SHOW OS INFO
if ($osID == "debian") { 
    $os = $osN.' '.$svi; 
    $sub = ucfirst($osVC);
}
elseif ($osID == "ubuntu") { 
    $os = $osPN; 
    $sub = $osV;
}
else {
    $os = $osPN; 
    $sub = $osV;
}

// GET FULL KERNEL INFO
$kerin = 'cat /proc/version';
exec($kerin, $outker);
$ker_raw = $outker[0];



// GET DESKTOP INFO - STILL IN BETA
$dt = 'ls /usr/bin/*session';
$gui = "No GUI";
$guiInf = array();
exec($dt, $desk);
//print_r($desk);
foreach ($desk as $key => $value) { 
    // Detect Values Go Here
    if ($value == "/usr/bin/lxsession") { $gui = "LXDE"; }
    if ($value == "/usr/bin/cinnamon-session") { $gui = "MINT"; }
    if ($value == "/usr/bin/lxqt-session") { $gui = "LXQT"; }
    $guiInf[$key] = $value;
}



// GET CPU INFO
$cs = 0;
$pro = 'lscpu';
$proInf = array();
exec($pro, $proout);
foreach ($proout as $key => $value) { 
    $cinf = explode(": ", $value);
    $cinf[0] = trim($cinf[0]);
    $cinf[1] = trim($cinf[1]);
// Add Individual Items Here 
if ($cinf[0] == "CPU(s)") { $cn = $cinf[1]; }
if ($cinf[0] == "Model name") { $cm = ucwords($cinf[1]); }
if ($cinf[0] == "CPU MHz") { $cs = round($cinf[1]); }
    $proInf[$cinf[0]] = $cinf[1];
}
$cpu = $cn.':'.$cm.':'.$cs;
if ($cs != 0) { $cpuSho = $cn.' x '.$cm.' @ '.$cs.'MHz'; } else { $cpuSho = $cn.' x '.$cm; }


// GET MEMORY INFO
$fmem = 'free -m | sed -r "s/ +/,/g"';
exec($fmem, $outfrm);
//$ker_raw = $outker[0];
foreach ($outfrm as $key => $value) { 
    if ($key == 1) {
        $fmtem = explode(":,", $value);
        $fminf = explode(",", $fmtem[1]);
        foreach ($fminf as $key => $value) {
            if ($key == 0) { $totMem = $value; }
            if ($key == 5) { $avaMem = $value; }
        }
    }
}
$ram = $totMem.':'.$avaMem;

/* GET TOTAL MEMORY - BACKUP METHOD
$preGB = shell_exec('awk \'$1=="MemTotal:" {$2=$2/1024**2;$3="";} 1\' /proc/meminfo | column -t');
$memG1 = explode(": ", $preGB);
$memGB = number_format($memG1[1], 2);
*/



// GET WEB SERVER SOFTWARE
$web = $_SERVER['SERVER_SOFTWARE'];
// Alternate Version - seems to return that same as above anyway
//$web = apache_get_version();
$web_raw = $web;
if (strpos($web, ")") !== false) { $web = substr($web, 0, strpos($web, ")")+1); }



// GET WEB ROOT FOLDER
$www = $_SERVER['DOCUMENT_ROOT'];

// DETERMINE WEB USER
$user = getenv('APACHE_RUN_USER');
if ($user == "") { $user = getenv('USER'); }
if ($user == "") { $user = get_current_user(); }



// GET SQL INFO IF ENABLED
if ($dbPass == "") {
    $sql_raw = "";
    $sql = "DB Check Disabled";
} else {
if (!isset($dbHost)) { $dbHost = "localhost"; }
    $link = mysqli_connect($dbHost, $dbUser, $dbPass);
    if (mysqli_connect_errno()) {
        printf("Connect failed: %s\n", mysqli_connect_error());
        exit();
    }
    $sql_raw = mysqli_get_server_info($link);
    mysqli_close($link);


    // DATABASE TYPE DETECTION
    // Currently assuming MySQL if "Maria" not found in $sql_raw
    if (strpos($sql_raw, "Maria") !== false) {
        $pieces = explode("-", $sql_raw);
        $dbtcvt = count($pieces);
            if ($dbtcvt == 3) {
            $sql = $pieces[1]." ".$pieces[0];
            } else { $sql = $pieces[2]." ".$pieces[1]; }
    } else {
        $sql = "MySQL ".$sql_raw;
    }
}



// CHECK VERSION IF GIT INSTALLED
$ckg = exec('git version');
if ($ckg == "") { $git = "Not Found"; } else { $git = ucwords($ckg); }
//if ($ckg != "") { $git = ucwords($ckg); } <-- THIS WOULD HIDE GIT IF NOT FOUND - BUT DATABASE NEEDS AN ENTRY
//echo $git;

// WARN IF GIT FOLDER IS PUBLIC
$giturl = $baseURL.'/.git';
$git_headers = @get_headers($giturl);
if(!$git_headers || $git_headers[0] == 'HTTP/1.1 404 Not Found' || $git_headers[0] == 'HTTP/1.1 301 Moved Permanently') {
    $gitwarn = '';
//    echo "<a href='".$baseURL."/.git'>GIT URL NOT FOUND</a>";
//    echo '';
}
else {
    $gitinfo = "https://elite-star-services.com/blog/secure-git-folders/";
    $gitwarn = " | GIT FOLDER <a href='".$baseURL."/.git/'><b>".$baseURL."/.git/</b></a> PUBLIC - <a href='".$gitinfo."' style='color:firebrick;'>CLICK FOR INFO TO SECURE</a>";
    
 //   $gitwarn = " | <a href='".$baseURL."/.git/'>YOUR .GIT FOLDER IS PUBLIC</a> : Add <b style='color:midnightblue;'>RedirectMatch 404 /\.git</b> to .htaccess in root folder for security";
}



// GET PCI INFO
$pci = 'lspci';
$pciInf = array();
exec($pci, $pciout);
//print_r($pciout);
foreach ($pciout as $key => $value) { 
    $ptem = explode(" ", $value, 2);
    $pinf = explode(": ", $ptem[1]);
    // Add Individual Items Here 
    $pciInf[$pinf[0]] = $pinf[1];
}


// GET USB INFO
$usb = 'lsusb';
$usbInf = array();
exec($usb, $usbout);
//print_r($usbout);
foreach ($usbout as $key => $value) { 
    $uinf = explode(": ", $value);
    // Add Individual Items Here 
    $usbInf[$uinf[0]] = $uinf[1];
}




// CHECK FOR PHP-REDIS USING PHPINFO
$pre_array = phpinfo_array(1);
foreach ($pre_array as $id => $array) {
    //echo $id.':<br>';
    foreach ($array as $key => $item) {
        //echo $key .' | '. $item.'<br>';
        //if ($key == "Redis Version") { $redis = substr($item, 0, strpos($item, "(")); }
        if ($key == "Redis Version") { $redis = $item; }
    }
}

//if (!$redis) { $redis = "Not Found"; }
//echo $redis;

 
//  Connect to Redis & get Server Version - MUST HAVE PROPER IP OR ERRORS OUT
//   $redisS = new Redis(); 
//   $redisS->connect('10.0.0.100', 6379); 
//   echo "Redis Server Running v".$redisS->info()['redis_version']." Found!<br>"; 




// PARSE WEB USER FROM PHPINFO IF NOT DEFINED
if ($user == "") {
    $pre_array = phpinfo_array(1);
    foreach ($pre_array as $id => $array) {
        //echo $id.':<br>';
        foreach ($array as $key => $item) {
            //echo $key .' | '. $item.'<br>';
            if ($key == "User/Group") { $user = substr($item, 0, strpos($item, "(")); }
       }
    }
}



// OPTIONAL USER INCLUDE FILE
$file = "userInc.php";
$userIns = "";
if (file_exists($file)) {
  include $file;
}



// BUILD SERVER INFORMATION ARRAY
$sysinf = array( "SID" => $sid,
                "URL" => $url,
                "IP" => $ip,
                "PASS" => $token,
                "HOST" => $host,
                "RUN" => $run,
                "OS" => $os,
                "KER" => $ker,
                "GUI" => $gui,
                "VM" => $vm,
                "CPU" => $cpu,
                "MEM" => $ram,
                "WEB" => $web,
                "WWW" => $www,
                "USER" => $user,
                "PHP" => $php,
                "PMA" => $pmasurl,
                "SSL" => $ssl,
                "SQL" => $sql,
                "GIT" => $git,
                "VER" => $clientVersion,
                "WPV" => $myp_ver );
$cvsinf = $sysinf;



/*    
// WRITE CSV INFO FILE
$filename = 'sysinfo.csv';
// open csv file for writing
$syscsv = fopen($filename, 'w');

if ($syscsv === false) {
	die('Error opening the file ' . $filename);
}

//print_r($cvsinf);
$sep = ",";

foreach ($cvsinf as $line) {
//    fputcsv($syscsv, $line);
fwrite($syscsv, $line.$sep);
//    echo $line."<br>";
}
$syscsv = rtrim($syscsv, ",");
fclose($syscsv);
*/



// DETERMINE IF DISPLAY OR UPDATE MODE
if(isset($_GET["json"])) {
    // CREATE UPDATE DATA USING JSON
    header("Content-Type: application/json; charset=utf-8");
	echo json_encode($cvsinf);
} else {
// BEGIN DISPLAY MODE



// CHECK IF UPDATE AVAILABLE (skip if WP Plugin version)
if (!isset($isWP)) {
$versionURL = "https://cs.elite-star-services.com/servinfo_sa/dist/client/version.txt";
$remoteVersion = file_get_contents($versionURL);

if ( !$remoteVersion ) {
// IF DOWNLOAD FAILED -> SSL EXCEPTION
$arrContextOptions=array(
    "ssl"=>array(
        "verify_peer"=>false,
        "verify_peer_name"=>false,
    ),
);  
$remoteVersion = file_get_contents($versionURL, false, stream_context_create($arrContextOptions));
} 

if ( !$remoteVersion ) {
    $noUp = "Yes";
}

  if (version_compare($remoteVersion, $clientVersion) ==  1) {
    $hasUpdate = "Yes";
  }
}




?>
<head>
<!DOCTYPE html>
<!-- 3rd Party Hosted -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fontawesome-4.7@4.7.0/css/font-awesome.min.css">
<!-- Elite Star Hosted -->
<link rel="stylesheet" href="https://cs.elite-star-services.com/common/css/ess.css"/>
<link rel="stylesheet" href="https://cs.elite-star-services.com/common/css/servinfo.css"/>
<script src="https://cs.elite-star-services.com/common/js/jquery.min.js"></script>
<script src="https://cs.elite-star-services.com/common/js/bootstrap.min.js"></script>
<!-- DataTables  -->
<link rel="stylesheet" href="https://cs.elite-star-services.com/common/css/dataTables.bootstrap.min.css">
<script src="https://cs.elite-star-services.com/common/js/jquery.dataTables.min.js"></script>
<script src="https://cs.elite-star-services.com/common/js/dataTables.bootstrap.min.js"></script>
<script src="https://cs.elite-star-services.com/common/js/ess.dataTables.js" type="text/javascript"></script>
<link rel="shortcut icon" href="https://cs.elite-star-services.com/common/img/sifavicn.png">
<title>ServInfo - Server Information</title>
</head>
<?php



// BEGIN OUTPUT
echo "<div class='container'>";
echo "<div class='col-md-12'>";
echo "<div class='panel panel-navbar'>";



// TITLE & VERSION / UPGRADE INFORMATION
global $si_url;
echo "<div class='panel-heading center'><a class='si-page-title' href='".$si_url."'>ServInfo Server Information Manager</a></div>";
echo "<table class='table table-condensed'>";
if (isset($hasUpdate)) {
    echo "<tr class='w center'><td colspan='2'>** CLIENT UPDATE AVAILABLE -- New Version: ".$remoteVersion." ~ ";
    echo "Your Version: ".$clientVersion." -- <a class='bold-text' href='sc_upd.php?".$token."'>UPGRADE CLIENT NOW</a> **</td><td style='display:none;'></td></tr>";
} elseif (isset($noUp)) {
    // Warn if not able to check version
    echo "<tr class='w center'><td colspan='2'>* UNABLE TO CHECK FOR UPDATE * (Current Client Version ".$clientVersion.")</td><td style='display:none;'></td></tr>";
} else {
    // Maybe display nothing if no update needed?
    //echo "<tr class='i center'><td colspan='2'>-- ServInfo Client Version ".$clientVersion." --</td><td style='display:none;'></td></tr>";
}


// SHOW SERVINFO ARRAY IF DEV MODE ON
if (isset($devMode) && $devMode == "TRUE") {
//print_r($sysinf);
    echo "<tr class='h center'><td colspan='2'>INFORMATION PASSED TO DATABASE - DEV MODE ACTIVE</td><td style='display:none;'></td></tr>";
    foreach ($sysinf as $key => $value) { 
       echo '<tr><td class="e">'.$key.'</td><td class="v">'.$value.'</td></tr>';
}


// DESKTOP DETECTION TESTING
echo "<tr class='h center'><td colspan='2'>GUI DETECTION TESTS</td><td style='display:none;'></td></tr>";
//print_r($guiInf);
    foreach ($guiInf as $key => $value) { 
      echo '<tr><td class="e">'.$key.'</td><td class="v">'.$value.'</td></tr>';
    }
}



// OPTIONAL OUTPUT BLOCK FOR USERS
if ($userIns != "") {
echo "<tr><td colspan='2'>";
echo $userIns;
echo "</td><td style='display: none;'></td></tr>";
}



// DISPLAY SERVER INFORMATION
echo '</table>';
echo '<div class="row">';
echo '<div class="col-md-12">';
echo '<div class="panel panel-default pullup">';
//echo "<div class='panel-heading center'>Server: ".$host."</div>";
echo "<div class='panel-body'><table id='servinfo_client' class='table' width='934px' align='center'>";
echo '<thead><tr><th style="display:none;"></th><th style="display:none;"></th></tr></thead>';
//echo "<tr class='h'><td colspan='2'><center>KEY SERVER INFORMATION</center></td><td style='display:none;'></td></tr>";
echo '<tr><td class="e">Server Host Name</td><td class="v">'.$host.'</td></tr>';
echo '<tr><td class="e">IP Address</td><td class="v">'.$ip.'</td></tr>';
echo '<tr><td class="e">Base URL</td><td class="v"><a href="'.$baseURL.'" style="color:#2e6da4; background-color:transparent;"><b>'.$baseURL.'</b></a></td></tr>';
echo '<tr><td class="e">Certificate Information</td><td class="v">'.$ssl.'</td></tr>';
echo '<tr><td class="e">Script URL</td><td class="v">'.$url.'</td></tr>';
if ($si_url == "") { 
	echo '<tr><td class="e">ServInfo Server</td><td class="v">NOT DEFINED</td></tr>';
} else {
	echo '<tr><td class="e">ServInfo Server</td><td class="v"><a href="'.$si_url.'" style="color:#2e6da4; background-color:transparent;"><b>'.$si_url.'</b></a></td></tr>';
}
echo '<tr><td class="e">Client Token</td><td class="v">'.$token.'</td></tr>';
echo '<tr><td class="e">Server ID</td><td class="v">'.$sid.'</td></tr>';
echo '<tr><td class="e">Server Uptime</td><td class="v">'.$upTime.'</td></tr>';
echo '<tr><td class="e">Operating System</td><td class="v">'.$os.'</td></tr>';
echo '<tr><td class="e">OS Version</td><td class="v">'.$sub.'</td></tr>';
echo '<tr><td class="e">OS Kernel</td><td class="v">'.$ker.'</td></tr>';
echo '<tr><td class="e">CPU Information</td><td class="v">'.$cpuSho.'</td></tr>';
echo '<tr><td class="e">System Memory</td><td class="v">Total: '.$totMem.'MB / Available: '.$avaMem.'MB';
echo '<tr><td class="e">Web OS</td><td class="v">'.$web.'</td></tr>';
if ($web != $web_raw) { echo '<tr><td class="e">Raw Web OS Data</td><td class="v">'.$web_raw.'</td></tr>'; }
echo '<tr><td class="e">Web Root</td><td class="v">'.$www.'</td></tr>';
echo '<tr><td class="e">Web User</td><td class="v">'.$user.'</td></tr>';
if ($proxy != "") { echo '<tr><td class="e">Reverse Proxy</td><td class="v">YES</td></tr>'; }
echo '<tr><td class="e">PHP Version</td><td class="v">'.$php.'</td></tr>';
echo '<tr><td class="e">Database Server</td><td class="v">'.$sql.'</td></tr>';
echo '<tr><td class="e">Raw SQL Data</td><td class="v">'.$sql_raw.'</td></tr>';

if (isset($pma_exists)) { echo '<tr><td class="e">phpMyAdmin Link</td><td class="v">'.$pmalink.'</td></tr>'; }
if (isset($pmainfo)) { echo '<tr><td class="e">phpMyAdmin Token for Above Instructions</td><td class="v">-'.$pmatok.'</td></tr>'; }
if (isset($pma)) { echo '<tr><td class="e">phpMyAdmin Version</td><td class="v">'.$pma.'</td></tr>'; }

if (isset($redis)) { echo '<tr><td class="e">php-Redis Version</td><td class="v">'.$redis.'</td></tr>'; }

if (isset($git)) { echo '<tr><td class="e">GIT (Version Control)</td><td class="v">'.$git.$gitwarn.'</td></tr>'; }

echo '<tr><td class="e">Desktop / GUI</td><td class="v">'.$gui.'</td></tr>';
echo '<tr><td class="e">Virtualization</td><td class="v">'.$vm.'</td></tr>';
echo '<tr><td class="e">ServInfo Client Version</td><td class="v">'.$clientVersion.'</td></tr>';
if (function_exists( 'classicpress_version' )) { $my_cm = "ClassicPress"; } else { $my_cm = "WordPress"; }
if ($wp_version != '0') { echo '<tr><td class="e">'.$my_cm.' Version</td><td class="v">'.$myp_ver.'</td></tr>'; }


// SHOW OS INFO
//print_r($output);
echo "<tr class='si-heading center'><td colspan='2'>OPERATING SYSTEM INFORMATION</td><td style='display:none;'></td></tr>";
foreach ($output as $key => $value) { 
    $osi = explode("=", $value);
    echo '<tr><td class="e">'.$osi[0].'</td><td class="v">'.str_replace('"', '', $osi[1]).'</td></tr>';
}


// SHOW MACHINE INFO
echo "<tr class='si-heading center'><td colspan='2'>MACHINE INFORMATION</td><td style='display:none;'></td></tr>";
//print_r($macInf);
foreach ($macInf as $key => $value) { 
    echo '<tr><td class="e">'.$key.'</td><td class="v">'.$value.'</td></tr>';
}
echo '<tr><td class="e">Full Kernel Info</td><td class="v">'.$ker_raw.'</td></tr>';


// SHOW ENVIRONMENT INFO IF PHP > 5
if ($php > 6) {
echo "<tr class='si-heading center'><td colspan='2'>ENVIRONMENT INFORMATION</td><td style='display:none;'></td></tr>";
$envInf = getenv();
//print_r($envInf);
    foreach ($envInf as $key => $value) {
        echo '<tr><td class="e">'.$key.'</td><td class="v">'.$value.'</td></tr>';
    }
}


// SHOW CERTIFICATE INFO IF VALID
if ($certOwn != "") {
//print_r($certinfo);
echo "<tr class='si-heading center'><td colspan='2'>CERTIFICATE INFORMATION</td><td style='display:none;'></td></tr>";
echo '<tr><td class="e">Certificate Expiration Date</td><td class="v">'.$certDat.'</td></tr>';
    foreach ($certinfo as $key => $item) {
        if ($item != "" && !is_array($item)) {
            echo '<tr><td class="e">'.$key.'</td><td class="v">'.$item.'</td></tr>';
        }
        if ($key == "subject") {
            foreach ($item as $type => $value) {
           echo '<tr><td class="e">'.$type.'</td><td class="v">'.$value.'</td></tr>';
            }
        }
        if ($key == "issuer") {
           foreach ($item as $type => $value) {
            echo '<tr><td class="e">'.$type.'</td><td class="v">'.$value.'</td></tr>';
            }
       }
        if ($key == "extensions") {
            foreach ($item as $type => $value) {
            echo '<tr><td class="e">'.$type.'</td><td class="v">'.$value.'</td></tr>';
            }
        }
    }
}


// SHOW CPU INFO
//print_r($proInf);
echo "<tr class='si-heading center'><td colspan='2'>CPU INFORMATION</td><td style='display:none;'></td></tr>";;
foreach ($proInf as $key => $value) { 
    echo '<tr><td class="e">'.$key.'</td><td class="v">'.$value.'</td></tr>';
}



/* SHOW CORE BY CORE CPU INFO
echo "<tr class='si-heading center'><td colspan='2'>EXTENDED CPU INFORMATION</td><td style='display:none;'></td></tr>";
$cpi = 'cat /proc/cpuinfo';
exec($cpi, $outcpu);

// REMOVE EMPTY LAST ELEMENT FROM ARRAY
if (end($outcpu) == "") { 
    array_pop($outcpu); 
}
//print_r($outcpu);
foreach ($outcpu as $key => $value) { 
    if ($value == "") {
        echo "<tr class='l'><td colspan='2'></td><td style='display:none;'></td></tr>";
    } else {
        $cpuInf = explode(": ", $value);
        if ($cpuInf[1] != "") {
            echo '<tr><td class="e">'.$cpuInf[0].'</td><td class="v">'.$cpuInf[1].'</td></tr>';
        }
    }
}
*/



// SHOW PCI INFO
echo "<tr class='si-heading center'><td colspan='2'>PCI DEVICE INFORMATION</td><td style='display:none;'></td></tr>";
//print_r($pciInf);
foreach ($pciInf as $key => $value) { 
    echo '<tr><td class="e">'.$key.'</td><td class="v">'.$value.'</td></tr>';
}


// SHOW NETWORK DEVICES
$net = 'ip address show';
//$net = 'ifconfig';
// ifconfig could be backup if ip not working on some machines but is no less complex to parse
echo "<tr class='si-heading center'><td colspan='2'>NETWORK DEVICE INFORMATION</td><td style='display:none;'></td></tr>";
exec($net, $outnet);
//print_r($outnet);
foreach ($outnet as $key => $value) { 
    if (is_numeric($value[0])) {
        $netdev = explode(": ", $value);
        echo "<tr class='l'><td colspan='2'><b>".$netdev[1]."</b></td><td style='display:none;'></td></tr>";
        $netdet = explode(" ", $netdev[2]);
        foreach ($netdet as $key => $value) { 
            if ($key != 0) {
                if ($key % 2 != 0) {  // determines if # even / odd
                    echo '<tr><td class="e">'.$value.'</td>';
                } else {
                    echo '<td class="v">'.$value.'</td></tr>';
                }
            }
        }

    } else {

        $netde2 = explode(" ", $value);
        $netloop = 1;
        foreach ($netde2 as $key => $value) { 
            if (($value != "") AND ($value != "noprefixroute") AND ($value != $netdev[1])) {
                if ($netloop % 2 != 0) {  // determines if # even / odd
                    echo '<tr><td class="e">'.$value.'</td>';
                } else {
                    echo '<td class="v">'.$value.'</td></tr>';
                }
                $netloop++;
            }
        }
    }
}


// SHOW USB INFO
echo "<tr class='si-heading center'><td colspan='2'>USB DEVICE INFORMATION</td><td style='display:none;'></td></tr>";
//print_r($usbInf);
foreach ($usbInf as $key => $value) { 
    echo '<tr><td class="e">'.$key.'</td><td class="v">'.$value.'</td></tr>';
}


// SHOW DRIVE INFO
$disk = 'lsblk -P -o NAME,PATH,SIZE,TYPE,PARTTYPENAME,MOUNTPOINT';
echo "<tr class='si-heading center'><td colspan='2'>DRIVE INFORMATION</td><td style='display:none;'></td></tr>";
exec($disk, $diskout);
//print_r($diskout);
foreach ($diskout as $key => $value) { 
    $dtem = explode('" ', $value);
    foreach ($dtem as $id => $item) {
    $dinf = explode('="', $item);
        if ($dinf[0] == "NAME") { 
            echo "<tr class='l'><td colspan='2'><b>".$dinf[1]."</b></td><td style='display:none;'></td></tr>"; 
        } else {
            $dinf[1] = str_replace('"', '', $dinf[1]);
            if ($dinf[1] != "") {
               echo '<tr><td class="e">'.$dinf[0].'</td><td class="v">'.$dinf[1].'</td></tr>';
            }
        }
    }
}


// SHOW MEMORY INFO
echo "<tr class='si-heading center'><td colspan='2'>EXTENDED MEMORY INFORMATION</td><td style='display:none;'></td></tr>";
$mem = 'cat /proc/meminfo';
exec($mem, $outmem);
//print_r($outmem);
foreach ($outmem as $key => $value) { 
        $memInf = explode(": ", $value);
        echo '<tr><td class="e">'.trim($memInf[0]).'</td><td class="v">'.trim($memInf[1]).'</td></tr>';
}


// SHOW PARSED PHPINFO
$show_array = phpinfo_array(1);
echo "<tr class='si-heading center'><td colspan='2'>PHPINFO INFORMATION</td><td style='display:none;'></td></tr>";
foreach ($show_array as $id => $array) {
echo "<tr class='l'><td colspan='2'><center><b>".$id."</b></center></td><td style='display:none;'></td></tr>";
    foreach ($array as $key => $item) { 
        if ($item != "" && !is_array($item)) {
        echo '<tr><td class="e">'.$key.'</td><td class="v">'.$item.'</td></tr>'; 
        }
    }
}


echo "</table></div></div></div></div></div></div>";


// FOOTER (skip if WP Plugin call)
if (!$isPlug) {
echo '
<div class="container-fluid">
    <div class="text-center center-block">
    <p class="txt-railway center"><a href="https://servinfo.elite-star-services.com/">ServInfo Server Information Manager</a></p>
    </div>
</div>';
}

echo '</div>';
}


}
?>